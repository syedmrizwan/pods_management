package main

import (
	"fmt"
	"github.com/syedmrizwan/pods_management/api"
	"os"

	_ "github.com/syedmrizwan/pods_management/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

// @title Pods Management
// @version 1.0
// @description Pods Management Blueprint.

// @contact.name API Support
// @contact.email syedmrizwan@outlook.com
type Pod interface {
	startPod() string
	shutDownPod() string
}

type PodA struct {
	name string
}

func (p PodA) startPod() string {
	return fmt.Sprintf("Staring %s ...", p.name)
}

func (p PodA) shutDownPod() string {
	return fmt.Sprintf("Shutting down %s ...", p.name)
}

func main() {

	var p Pod
	p = PodA{"POD A"}
	fmt.Printf("type of p is %T\n", p)
	fmt.Printf("value of p is %v\n", p)
	fmt.Println(p.startPod())
	fmt.Println(p.shutDownPod())
	r := gin.New()

	r.Use(cors.Default())

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	// Route Paths
	api.RegisterRoutes(r.Group("/api/v1"))

	err := r.Run(":8080") // listen and serve on 0.0.0.0:8080

	if err != nil {
		os.Exit(1)
	}
}
