package main

import (
	"github.com/syedmrizwan/pods_management/redis"
	"os"
	"fmt"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/syedmrizwan/pods_management/api"
	"github.com/syedmrizwan/pods_management/model"
	swaggerFiles "github.com/swaggo/files" // swagger embed files
	//_ "github.com/syedmrizwan/pods_management/docs" // docs is generated by Swag CLI, you have to import it.
	//"github.com/syedmrizwan/pods_management/model"
)

// @title Pods Management
// @version 1.0
// @description Pods Management Blueprint.

// @contact.name API Support
// @contact.email syedmrizwan@outlook.com

func main() {

	redis.InsertVcenterDetailToRedis()
	redis.RoundRobin()
	redis.RemoveConfigFromRedis("Remove vCenter")

	testBufferedChannel()

	r := gin.New()

	r.Use(cors.Default())

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	// Route Paths
	api.RegisterRoutes(r.Group("/api/v1"))

	err := r.Run(":8080") // listen and serve on 0.0.0.0:8080

	if err != nil {
		os.Exit(1)
	}

}
func testBufferedChannel() {
	inProgressPods := []model.PodConfiguration{
		{PodID: int64(1), PodName: "a", Status: "in"},
		{PodID: int64(2), PodName: "b", Status: "out"},
		{PodID: int64(3), PodName: "c", Status: "in"},
	}

	fmt.Println(inProgressPods)

	taskStatusChan := make(chan *model.PodConfiguration, len(inProgressPods))
	for index, pod := range inProgressPods {
		go func(i int, p model.PodConfiguration) {
			if i == 0 {
				taskStatusChan <- nil
			} else {
				taskStatusChan <- &p
			}

		}(index, pod)
	}

	for i := 0; i < len(inProgressPods); i++ {
		podConfig := <-taskStatusChan
		fmt.Println(podConfig)
	}

}
