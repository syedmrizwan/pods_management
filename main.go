package main

import (
	"fmt"
	_ "github.com/syedmrizwan/pods_management/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/syedmrizwan/pods_management/model"
)

// @title Pods Management
// @version 1.0
// @description Pods Management Blueprint.

// @contact.name API Support
// @contact.email syedmrizwan@outlook.com
type MyString string

type Pod interface {
	startPod() string
	shutDownPod() string
}

type PodA struct {
	name string
}

func (p PodA) startPod() string {
	return fmt.Sprintf("Staring %s ...", p.name)
}

func (p PodA) shutDownPod() string {
	return fmt.Sprintf("Shutting down %s ...", p.name)
}

func testEmptyInterface(i interface{}) {
	fmt.Printf("value given is of type '%T' with value %v\n", i, i)
	switch r := i.(type) {
	case int:
		fmt.Printf("%v is an integer\n", r)
	case MyString:
		fmt.Printf("%v is MyString\n", r)
	}
}

func testBufferedChannel() {
	inProgressPods := []model.PodConfiguration{
		{PodID: int64(1), PodName: "a", Status: "in"},
		{PodID: int64(2), PodName: "b", Status: "out"},
		{PodID: int64(3), PodName: "c", Status: "in"},
	}

	fmt.Println(inProgressPods)

	taskStatusChan := make(chan *model.PodConfiguration, len(inProgressPods))
	for index, pod := range inProgressPods {
		go func(i int, p model.PodConfiguration) {
			if i == 0 {
				taskStatusChan <- nil
			} else {
				taskStatusChan <- &p
			}

		}(index, pod)
	}

	for i := 0; i < len(inProgressPods); i++ {
		podConfig := <-taskStatusChan
		fmt.Println(podConfig)
	}

}

func main() {
	testBufferedChannel()

	//for i := 0; i < len(inProgressPods); i++ {
	//	podConfig := <-taskStatusChan
	//	fmt.Println(podConfig)
	//}

	//var p Pod
	//p = PodA{"POD A"}
	//fmt.Printf("type of p is %T\n", p)
	//fmt.Printf("value of p is %v\n", p)
	//fmt.Println(p.startPod())
	//fmt.Println(p.shutDownPod())
	//r := gin.New()
	//
	//r.Use(cors.Default())
	//
	//r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	//// Route Paths
	//api.RegisterRoutes(r.Group("/api/v1"))
	//
	//err := r.Run(":8080") // listen and serve on 0.0.0.0:8080
	//
	//if err != nil {
	//	os.Exit(1)
	//}

	//Testing interface
	//db := database.GetConnection()
	//
	//var pods []model.Pod
	//
	//podIds := []int64{1, 2, 3}
	//_, err := db.Model(&pods).Set("status = ?", "failed").
	//	Where("pod.status != ?", "pending").
	//	Where("pod.status != ?", "in-progress").
	//	Where("pod.id IN (?)", pg.In(podIds)).
	//	Returning("*").
	//	Update()
	//
	//if err != nil {
	//	panic(err)
	//}
	//
	//fmt.Println(pods)

	//ms := MyString("Hello World")
	//r := 25
	//testEmptyInterface(ms)
	//testEmptyInterface(r)

}
